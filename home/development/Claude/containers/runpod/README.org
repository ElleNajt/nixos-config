#+title: RunPod Sync Tool

Tool for syncing code to RunPod and running commands remotely.

* Attribution

API provisioning code adapted from [[https://github.com/Stefan-Heimersheim/runpod_cli][Stefan-Heimersheim/runpod_cli]].

* Setup

** 1. Get RunPod Connection Details

⚠️ Must use the "SSH over exposed TCP" connection from RunPod dashboard, otherwise you'll get a PTY error.

In your RunPod dashboard:
1. Go to your pod
2. Click "Connect" → "SSH over exposed TCP"
3. Note the connection details (host, port, user - typically "root")

** 2. Generate Dedicated SSH Key

Generate a dedicated SSH key just for RunPod (don't reuse your main keys):

#+begin_src bash
ssh-keygen -t ed25519 -f ~/.ssh/runpod_key -C "runpod-dedicated"
#+end_src

*Security Note:* When using =claudebox=, the SSH key never enters the container. Instead, =claudebox= starts an isolated SSH agent Docker container on your host that only has this RunPod key loaded, then forwards the agent socket to your main container. This means:
- ✅ Private key stays on your host machine
- ✅ Container cannot extract key material (only signatures via agent)
- ✅ Agent is isolated from your other SSH keys (GitHub, work, etc.)
- ✅ Agent container persists for performance but only contains RunPod key (can be stopped with =docker rm -f claudebox-ssh-agent=)

** 3. Create .runpod_config.json

Create =.runpod_config.json= in your project root (or git repository root):

#+begin_src json
{
  "user": "root",
  "host": "xxx.xxx.xxx.xxx",
  "port": "12345",
  "ssh_key": "~/.ssh/runpod_key",
  "remote_dir": "/workspace/your-project/"
}
#+end_src

*Security:* When running inside the claudebox container, this file is automatically mounted read-only to prevent tampering. You must edit it from your host machine. This prevents Claude from being tricked into connecting to malicious servers.

** 4. Add Script to PATH

Add the runpod script to your PATH so it can be executed from anywhere:

#+begin_src bash
# Add to your shell configuration (~/.bashrc, ~/.zshrc, etc.)
export PATH="$PATH:/path/to/nixos-config/home/development/Claude/containers/runpod"
#+end_src

** 5. Add to Claude's Allowed Commands

Add to your Claude permissions:

#+begin_src
Bash(runpod:*)
#+end_src

This allows Claude to edit files locally, rsync them over, and execute code on RunPod without human intervention.

Claude instructions are in =nixos-config/home/development/Claude/runpod.md=

* Commands

** Integrated Workflow

- =runpod claudepod create [--gpu_type=TYPE] [--runtime=MINS]= - Create pod, sync code, mount, set up git remote (all-in-one)

** SSH Commands (requires .runpod_config.json)

- =runpod status= - Show what files are out of sync (dry run of push/pull)
- =runpod mount [mount_point]= - Mount remote directory via SSHFS (default: ./.runpod-mount)
- =runpod unmount [mount_point]= - Unmount SSHFS mount
- =runpod config= - Show current configuration
- =runpod push [source] [dest]= - Push directory to RunPod (defaults: current dir → remote_dir)
- =runpod pull [source] [dest]= - Pull directory from RunPod (defaults: remote_dir → current dir)
- =runpod run "command"= - Execute command on RunPod
- =runpod python= - Open interactive Python REPL on RunPod
- =runpod= - Open interactive SSH session

** API Commands (requires .env with RUNPOD_API_KEY)

- =runpod create= - Create a new pod with configurable GPU, memory, disk, runtime
- =runpod list= - List all pods with status, time remaining, and costs
- =runpod terminate <pod_id>= - Terminate a specific pod

API credentials should be in =.env= (in current directory) or =~/.config/runpod_cli/.env= with:
- =RUNPOD_API_KEY=
- =RUNPOD_NETWORK_VOLUME_ID=
- =RUNPOD_S3_ACCESS_KEY_ID=
- =RUNPOD_S3_SECRET_KEY=

* Workflow

** Recommended: Integrated Claudepod Workflow

This is the preferred workflow - single command to provision, sync, and mount:

1. *Create pod with claudepod* - =runpod claudepod create --gpu_type="RTX A4000" --runtime=120=
   - Provisions new pod via API
   - Rsyncs current directory to RunPod
   - Mounts RunPod to =./.runpod-mount= via SSHFS
   - Sets up local repo as git remote
   - Creates =.runpod_config.json= automatically
2. *Work in the mount* - =cd .runpod-mount && claude= - Claude edits files directly on RunPod
3. *Backup periodically* - =git commit -am 'Work' && git push local main= - Push to local repo
4. *Execute on RunPod* - =runpod run "python script.py"= to run code
5. *Clean up* - =runpod terminate <pod_id>= - Destroys pod, local backup remains

This ensures:
- ✅ Single source of truth while working (RunPod via SSHFS mount)
- ✅ Local backup copy (initial rsync + git pushes)
- ✅ No manual config setup
- ✅ No sync conflicts (work directly in mount)

** Alternative: Manual SSHFS Mount Workflow

If you have an existing pod with =.runpod_config.json=:

1. *Mount RunPod filesystem* - Run =runpod mount= to mount the remote directory via SSHFS to =./.runpod-mount=
2. *Work in the mount* - =cd .runpod-mount && claude= - Claude edits files directly on RunPod
3. *Execute on RunPod* - Claude runs =runpod run "python script.py"= to execute code
4. *Unmount when done* - =runpod unmount= to disconnect

** Alternative: Push/Pull Workflow

The traditional workflow using rsync (use when SSHFS latency is problematic):

1. *Claude edits code locally* - Claude uses its normal file editing tools (Read, Write, Edit) to modify code in your local project directory inside the claudebox container

2. *Claude pushes to RunPod* - Claude runs =runpod push= which uses rsync to sync the local directory to the remote RunPod machine via SSH.

3. *Claude runs commands remotely* - Claude executes commands on RunPod using =runpod run "command"=, typically to install dependencies, run training scripts, etc.

4. *Claude pulls results back* - After the remote work completes, Claude uses =runpod pull= to bring results (model weights, logs, etc.) back to your local machine

5. *You commit and push from host* - Because of the layered filesystem, you can commit changes from outside the container on your host machine, keeping git credentials off the container

⚠️ *Warning:* This workflow can lead to Claude using =runpod run sed= or =runpod run "echo ..."= to edit files remotely, creating divergent versions. Use the mount workflow instead.

#+begin_src bash
# Recommended: Integrated claudepod workflow
cd ~/code/my-project
runpod claudepod create --gpu_type="RTX A4000" --runtime=120
cd .runpod-mount && claude                # Work in mount
git commit -am 'Work' && git push local main  # Backup to local
runpod run "python train.py"              # Execute on RunPod
runpod terminate <pod_id>                 # Clean up

# Alternative: Manual mount workflow (existing pod)
runpod mount                              # Mount to ./.runpod-mount
cd .runpod-mount && claude                # Work in mount
runpod run "python train.py"              # Execute code
runpod unmount                            # Unmount when done

# Alternative: Push/Pull workflow
runpod push                               # Push current directory to RunPod
runpod run "cd /workspace/project && python train.py"  # Run a script
runpod pull /workspace/project/results/ ./results/     # Pull results back

# Other commands
runpod python                             # Open interactive Python REPL on RunPod
runpod                                    # Interactive SSH session
#+end_src

* Security Considerations

⚠️ I am not a security expert!

In my opinion this is reasonably safe as long as nothing sensitive ends up on the RunPod machine. The best way to ensure that is to run this inside the container set up in =../claudebox=, to address these reasonable concerns:

** Concerns

1. Everything in the repo gets sent to the cloud machine, and there are no restrictions at all preventing exfiltration from there.
2. Claude can read files on your computer, move them into the repo, and send them elsewhere. Claude's permissions system is untrustworthy (Claude can edit its own settings.json), hence the container.
3. Claude could be tricked into editing =.runpod_config.json= and SSHing to a malicious server.

** Mitigations

1. *Prevent sensitive data from entering the container:*
   - Intercepting proxy prevents Claude credentials from entering the container (unclear if this matters)
   - ✅ *SSH key protection via isolated agent:* Private key never enters container. Claudebox starts isolated SSH agent Docker container on host with only RunPod key, forwards agent socket read-only. Container can authenticate to RunPod but cannot extract key material or use other keys.
   - Only provide read-only tokens (e.g., HuggingFace)

2. *Container firewall:* Security theater without a matching firewall on the RunPod side. Even with both, connections to GitHub/HuggingFace could be used to exfiltrate secrets via issues/etc. Still, probably useful.

3. *Read-only sensitive file mounts:* Container automatically remounts security-sensitive files as read-only:
   - =.runpod_config.json= - Prevents tampering with SSH connection details
   - =.git/hooks/= - Prevents malicious git hook injection
   - =.git/config= - Prevents tampering with git settings (user, remotes)
   - =.ssh/= - Prevents SSH key/config tampering
   - =.env*= - Prevents credential file modification
   These files require editing from host machine. With firewall enabled, the IP in runpod config gets allowlisted.

4. *Layered filesystem:* Push to GitHub from home machine, not from container. Keeps git credentials on host.

5. *Resource limits:* Container limited to 2GB RAM and 2 CPU cores to reduce attack surface.

** SSH Agent Implementation Details

The =claudebox= script implements SSH key protection via isolated agent forwarding:

1. *Agent isolation:* When =.runpod_config.json= is detected, claudebox starts or reuses a dedicated Docker container (=claudebox-ssh-agent=) running =ssh-agent= + =socat= for socket forwarding
2. *Container persistence:* Agent container persists across claudebox sessions for performance (shared between multiple project containers)
3. *Single key loading:* Only the RunPod key specified in config is loaded into the agent (via =ssh-add=)
4. *Socket forwarding:* Agent socket mounted into main container via shared Docker volume at =/.ssh-agent/proxy-socket=
5. *Environment setup:* =SSH_AUTH_SOCK= set in container to use forwarded socket
6. *Read-only key mount:* SSH private key briefly mounted read-only when adding to agent, never enters main container

This prevents key exfiltration while allowing legitimate SSH operations (ssh, rsync, sshfs) to work transparently. The agent container can be manually stopped with =docker rm -f claudebox-ssh-agent= if needed.

** TODOs

*** TODO - RunPod image with matching firewall
