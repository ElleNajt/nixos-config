#+title: RunPod Sync Tool

Tool for syncing code to RunPod and running commands remotely.

* Setup

** 1. Get RunPod Connection Details

⚠️ Must use the "SSH over exposed TCP" connection from RunPod dashboard, otherwise you'll get a PTY error.

In your RunPod dashboard:
1. Go to your pod
2. Click "Connect" → "SSH over exposed TCP"
3. Note the connection details (host, port, user - typically "root")

** 2. Generate Throwaway SSH Key

(Until I have an intercepting proxy for this)

Generate a dedicated SSH key just for RunPod (don't reuse your main keys):

#+begin_src bash
ssh-keygen -t ed25519 -f ~/.ssh/runpod_key -C "runpod-throwaway"
#+end_src

** 3. Create .runpod_config.json

Create =.runpod_config.json= in your project root (or git repository root):

#+begin_src json
{
  "user": "root",
  "host": "xxx.xxx.xxx.xxx",
  "port": "12345",
  "ssh_key": "~/.ssh/runpod_key",
  "remote_dir": "/workspace/your-project/"
}
#+end_src

*Important:* When running inside the claudebox container, this file is mounted read-only for security. Edit it from your host machine.

** 4. Add Script to PATH

Add the runpod script to your PATH so it can be executed from anywhere:

#+begin_src bash
# Add to your shell configuration (~/.bashrc, ~/.zshrc, etc.)
export PATH="$PATH:/path/to/nixos-config/home/development/Claude/containers/runpod"
#+end_src

** 5. Add to Claude's Allowed Commands

Add to your Claude permissions:

#+begin_src
Bash(runpod:*)
#+end_src

This allows Claude to edit files locally, rsync them over, and execute code on RunPod without human intervention.

Claude instructions are in =nixos-config/home/development/Claude/runpod.md=

* Commands

- =runpod config= - Show current configuration
- =runpod push [source] [dest]= - Push directory to RunPod (defaults: current dir → remote_dir)
- =runpod pull [source] [dest]= - Pull directory from RunPod (defaults: remote_dir → current dir)
- =runpod run "command"= - Execute command on RunPod
- =runpod python= - Open interactive Python REPL on RunPod
- =runpod= - Open interactive SSH session

* Workflow

The workflow when using this tool with Claude:

1. *Claude edits code locally* - Claude uses its normal file editing tools (Read, Write, Edit) to modify code in your local project directory inside the claudebox container

2. *Claude pushes to RunPod* - Claude runs =runpod push= which uses rsync to sync the local directory to the remote RunPod machine via SSH.

3. *Claude runs commands remotely* - Claude executes commands on RunPod using =runpod run "command"=, typically to install dependencies, run training scripts, etc.

4. *Claude pulls results back* - After the remote work completes, Claude uses =runpod pull= to bring results (model weights, logs, etc.) back to your local machine

5. *You commit and push from host* - Because of the layered filesystem, you can commit changes from outside the container on your host machine, keeping git credentials off the container

This way Claude can:
- Iterate on code quickly (edit locally, test remotely)
- Use GPU resources without GPU access on your machine
- Never have direct access to git credentials or your main SSH keys

#+begin_src bash
# Push current directory to RunPod
runpod push

# Run a script on RunPod
runpod run "cd /workspace/project && python train.py"

# Open interactive Python REPL on RunPod
runpod python

# Pull results back
runpod pull /workspace/project/results/ ./results/

# Interactive SSH session
runpod
#+end_src

* Security Considerations

⚠️ I am not a security expert!

In my opinion this is reasonably safe as long as nothing sensitive ends up on the RunPod machine. The best way to ensure that is to run this inside the container set up in =../claudebox=, to address these reasonable concerns:

** Concerns

1. Everything in the repo gets sent to the cloud machine, and there are no restrictions at all preventing exfiltration from there.
2. Claude can read files on your computer, move them into the repo, and send them elsewhere. Claude's permissions system is untrustworthy (Claude can edit its own settings.json), hence the container.
3. Claude could be tricked into editing =.runpod_config.json= and SSHing to a malicious server.

** Mitigations

1. *Prevent sensitive data from entering the container:*
   - Intercepting proxy prevents Claude credentials from entering the container (unclear if this matters)
   - *MAJOR CONCERN:* Currently using a throwaway SSH key copied into the container. Prefer an intercepting proxy here too - if the key is exfiltrated, an attacker could connect to RunPod, install malware, and compromise your home machine on next connection
   - Only provide read-only tokens (e.g., HuggingFace)

2. *Container firewall:* Security theater without a matching firewall on the RunPod side. Even with both, connections to GitHub/HuggingFace could be used to exfiltrate secrets via issues/etc. Still, probably useful.

3. *Read-only =.runpod_config.json=:* Container mounts the config as read-only, requiring edits outside the container. Makes it harder to SSH to the wrong machine, unless claude is in yolo mode. With firewall enabled, the IP address in the config gets allowlisted.

4. *Layered filesystem:* Push to GitHub from home machine, not from container. Keeps git credentials on host.

** TODOs

*** TODO - Intercepting proxy for SSH key (like credential proxy)
*** TODO - RunPod image with matching firewall
