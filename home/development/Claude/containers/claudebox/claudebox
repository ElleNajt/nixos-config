#!/bin/bash
set -euo pipefail

DOCKER_IMAGE="claude-code-devcontainer"
CONTAINER_NAME="claude-code-auth-$$-$(date +%s)"

CLAUDEBOX_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONTAINER_DIR="$(dirname "$CLAUDEBOX_DIR")"
PROXY_SCRIPT="$CONTAINER_DIR/proxies/claude-auth-proxy.py"

# Get the current working directory to determine project-specific config
CURRENT_DIR="$(pwd)"
# Convert full path to project name by removing home prefix and replacing / with -
# e.g., /Users/elle/code/project/subdir -> code-project-subdir
PROJECT_NAME="${CURRENT_DIR#$HOME/}" # Remove home directory prefix
PROJECT_NAME="${PROJECT_NAME//\//-}" # Replace all / with -

# Initialize variables
CLAUDE_ARGS=()
MOUNT_CLAUDE_MD=false
TEMP_CREDS=""
PROXY_PID=""
MAX_ATTEMPTS=30
ATTEMPT=0
RUN_BASH=false
VERBOSE=false
ENABLE_FIREWALL=false
while [[ $# -gt 0 ]]; do
    case $1 in
    --mount-claude-md)
        MOUNT_CLAUDE_MD=true
        shift
        ;;
    --bash)
        RUN_BASH=true
        shift
        ;;
    --verbose)
        VERBOSE=true
        shift
        ;;
    --firewall)
        ENABLE_FIREWALL=true
        shift
        ;;
    --help)
        cat <<'EOF'
Run Claude Code in a Docker container with credential isolation.

Real API credentials stay on the host and are injected via proxy.

USAGE:
    Run this script from your project directory:

    cd /path/to/your/project
    claudebox [OPTIONS] [CLAUDE_OPTIONS]

OPTIONS:
    --mount-claude-md Mount your real CLAUDE.md file (default: none)
    --bash            Run bash instead of claude
    --verbose         Enable verbose proxy logging
    --firewall        Enable firewall (blocks most network access)
    --help            Show this help

WORKSPACE:
    The current directory becomes /workspace in the container.
    Claude Code will have access to all files in the current directory.

EXAMPLES:
    cd ~/my-project && claudebox
    cd ~/my-project && claudebox --mount-claude-md -p "hello world"
    cd ~/my-project && claudebox --continue
EOF
        exit 0
        ;;
    *)
        # Pass unknown arguments to Claude
        CLAUDE_ARGS+=("$1")
        shift
        ;;
    esac
done

docker info >/dev/null 2>&1 || {
    echo "Docker not running"
    exit 1
}

# Build image if needed
if ! docker image inspect "$DOCKER_IMAGE" >/dev/null 2>&1; then
    [[ "$VERBOSE" == "true" ]] && echo "🔨 Building devcontainer image..."
    docker build -t "$DOCKER_IMAGE" -f "$CONTAINER_DIR/Dockerfile" "$CONTAINER_DIR" || exit 1
fi

# Find an available port
find_available_port() {
    local port=$1
    local max_port=65535
    for ((i = 0; i <= $((max_port - port)); i++)); do
        if ! nc -z localhost $((port + i)) 2>/dev/null; then
            echo $((port + i))
            return 0
        fi
    done
    echo "❌ No available ports found in range $port-$max_port" >&2
    return 1
}

# Check if proxy is already running
PROXY_PID=$(pgrep -f "claude-auth-proxy.py" || true)

if [[ -n "$PROXY_PID" ]]; then
    # Proxy is already running, get its port using lsof
    ACTUAL_PORT=$(lsof -P -n -p "$PROXY_PID" -a -i TCP -s TCP:LISTEN 2>/dev/null |
        grep -v "^COMMAND" | awk '{print $9}' | cut -d: -f2 | head -1)

    if [[ -n "$ACTUAL_PORT" ]]; then
        echo "✓ Using existing proxy on port $ACTUAL_PORT"
    else
        echo "❌ Found proxy process but couldn't determine port"
        exit 1
    fi
else
    # No proxy running, start a new one
    # Find available port in ephemeral range (58080-65535) to avoid conflicts with registered services
    ACTUAL_PORT=$(find_available_port 58080) || exit 1

    echo "🚀 Starting authentication proxy on port $ACTUAL_PORT"

    # Start proxy in background on the available port
    # Use installed version from PATH if available, otherwise use local
    PROXY_ARGS="--port $ACTUAL_PORT"
    if [[ "$VERBOSE" == "true" ]]; then
        PROXY_ARGS="$PROXY_ARGS --verbose"
        PROXY_LOG="/tmp/claudebox_proxy.log"
        echo "📝 Proxy logs: $PROXY_LOG"
    else
        PROXY_LOG="/dev/null"
    fi

    if command -v claude-auth-proxy.py &>/dev/null; then
        claude-auth-proxy.py $PROXY_ARGS >"$PROXY_LOG" 2>&1 &
    else
        python3 "$PROXY_SCRIPT" $PROXY_ARGS >"$PROXY_LOG" 2>&1 &
    fi
    PROXY_PID=$!

    # Health check polling - wait for proxy to be ready
    ATTEMPT=0
    while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
        if ! ps -p $PROXY_PID >/dev/null 2>&1; then
            echo "❌ Proxy process died unexpectedly"
            exit 1
        fi

        # Try to connect to the proxy port
        if nc -z localhost "$ACTUAL_PORT" 2>/dev/null; then
            echo "✅ Proxy ready"
            break
        fi

        ATTEMPT=$((ATTEMPT + 1))
        if [[ $ATTEMPT -eq $MAX_ATTEMPTS ]]; then
            echo "❌ Proxy failed to start after ${MAX_ATTEMPTS} attempts"
            kill $PROXY_PID 2>/dev/null || true
            exit 1
        fi

        sleep 0.2
    done
fi

# Cleanup on exit
cleanup() {
    local exit_code=$?

    # Save conversations from container before removing it
    if docker ps -a --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$" 2>/dev/null; then
        echo ""
        echo "💾 Saving conversations from container..."

        # Check if container has any conversations
        if docker exec "$CONTAINER_NAME" test -d /home/node/.claude/projects 2>/dev/null; then
            mkdir -p "$HOME/.claude/projects"

            # Copy each project directory, skipping if it already exists on host
            for project_dir in $(docker exec "$CONTAINER_NAME" find /home/node/.claude/projects -mindepth 1 -maxdepth 1 -type d 2>/dev/null || true); do
                project_name=$(basename "$project_dir")

                if [[ -d "$HOME/.claude/projects/$project_name" ]]; then
                    echo "   ⏭️  Skipping $project_name (already exists)"
                else
                    echo "   📥 Saving $project_name"
                    docker cp "$CONTAINER_NAME:/home/node/.claude/projects/$project_name" "$HOME/.claude/projects/" 2>/dev/null || true
                fi
            done
            echo "   ✅ Conversations saved to $HOME/.claude/projects"
        fi
    fi

    # Remove container (but NOT the proxy - it's shared!)
    docker rm -f "$CONTAINER_NAME" 2>/dev/null || true

    # Clean up temporary files
    rm -f "$TEMP_CREDS" 2>/dev/null || true

    # Kill isolated SSH agent if we started one
    if [[ -n "$RUNPOD_AGENT_PID" ]]; then
        kill "$RUNPOD_AGENT_PID" 2>/dev/null || true
    fi

    exit $exit_code
}
trap cleanup INT TERM EXIT

# Create dummy credentials (pipe directly, never write real creds to disk)
TEMP_CREDS=$(mktemp) || {
    echo "Failed to create temporary credentials file" >&2
    exit 1
}

# Try to get credentials and replace with dummy tokens in one operation
if ! get-claude-credentials.sh 2>/dev/null | jq '
        .claudeAiOauth.accessToken = "sk-ant-oat01-dummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDQ-DummyAA" |
        .claudeAiOauth.refreshToken = "sk-ant-ort01-dummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDummyDQ-DummyAA"
    ' >"$TEMP_CREDS" 2>/dev/null; then
    # Failed to get credentials or process them, clean up
    rm -f "$TEMP_CREDS"
    TEMP_CREDS=""
fi

# Build docker command
docker_cmd=(
    docker run --rm --name "$CONTAINER_NAME" -it
    -v "$(pwd):/workspace" -w /workspace
    -e "ANTHROPIC_BASE_URL=http://host.docker.internal:$ACTUAL_PORT"
    --privileged # Needed for fuse-overlayfs
)

# Mount only specific files and directories from .claude (explicit allowlist)
if [[ -d "$HOME/.claude" ]]; then
    # Mount settings.json if it exists
    if [[ -f "$HOME/.claude/settings.json" ]]; then
        docker_cmd+=(-v "$HOME/.claude/settings.json:/tmp/claude-general/settings.json:ro")
    fi

    # Mount agents directory if it exists
    if [[ -d "$HOME/.claude/agents" ]]; then
        docker_cmd+=(-v "$HOME/.claude/agents:/tmp/claude-general/agents:ro")
    fi

    # Mount any markdown files in top level .claude directory
    for mdfile in "$HOME/.claude"/*.md; do
        if [[ -f "$mdfile" ]]; then
            filename=$(basename "$mdfile")
            docker_cmd+=(-v "$mdfile:/tmp/claude-general/$filename:ro")
        fi
    done
fi

# Check if project-specific config exists and mount it
PROJECT_CONFIG_DIR="$HOME/.claude/projects/$PROJECT_NAME"
if [[ -d "$PROJECT_CONFIG_DIR" ]]; then
    echo "📁 Found project-specific config: $PROJECT_NAME"
    docker_cmd+=(-v "$PROJECT_CONFIG_DIR:/tmp/claude-project:ro")
else
    echo "📁 No project-specific config found for: $PROJECT_NAME"
fi

# Mount dummy credentials separately
[[ -n "$TEMP_CREDS" ]] && docker_cmd+=(-v "$TEMP_CREDS:/tmp/credentials.json:ro")
[[ "$MOUNT_CLAUDE_MD" == true && -f "$HOME/.claude/CLAUDE.md" ]] && docker_cmd+=(-v "$HOME/.claude/CLAUDE.md:/tmp/host-claude-md:ro")

# Mount .runpod_config.json as read-only if it exists in current directory
# Also set up isolated SSH agent for RunPod operations if config exists
RUNPOD_AGENT_PID=""
RUNPOD_AGENT_SOCK=""

if [[ -f "$(pwd)/.runpod_config.json" ]]; then
    echo "📝 Found .runpod_config.json, mounting to container"
    docker_cmd+=(-v "$(pwd)/.runpod_config.json:/workspace/.runpod_config.json:ro")

    # Extract SSH key path from config
    RUNPOD_KEY=$(jq -r '.ssh_key // empty' "$(pwd)/.runpod_config.json" 2>/dev/null || true)

    if [[ -n "$RUNPOD_KEY" ]]; then
        # Expand ~ to home directory
        RUNPOD_KEY="${RUNPOD_KEY/#\~/$HOME}"

        if [[ -f "$RUNPOD_KEY" ]]; then
            echo "🔑 Starting isolated SSH agent (only RunPod key)"

            # Start a fresh ssh-agent just for this container
            AGENT_OUTPUT=$(ssh-agent -s)
            eval "$AGENT_OUTPUT" >/dev/null
            RUNPOD_AGENT_PID=$SSH_AGENT_PID
            RUNPOD_AGENT_SOCK=$SSH_AUTH_SOCK

            # Add only the RunPod key to this isolated agent
            if ssh-add "$RUNPOD_KEY" 2>/dev/null; then
                echo "   ✓ Loaded RunPod key (isolated from other keys)"

                # Forward this isolated agent to container
                docker_cmd+=(-v "$RUNPOD_AGENT_SOCK:/ssh-agent:ro")
                docker_cmd+=(-e "SSH_AUTH_SOCK=/ssh-agent")
            else
                echo "   ⚠️  Failed to load RunPod key into agent"
                # Kill the agent we just started
                kill "$RUNPOD_AGENT_PID" 2>/dev/null || true
                RUNPOD_AGENT_PID=""
                RUNPOD_AGENT_SOCK=""
            fi
        else
            echo "⚠️  RunPod SSH key not found: $RUNPOD_KEY"
        fi
    fi
else
    echo "📝 No .runpod_config.json found in $(pwd)"
fi

docker_cmd+=("$DOCKER_IMAGE")

# Pass flags to container
export RUN_BASH
export ENABLE_FIREWALL

# Run container with setup script
"${docker_cmd[@]}" bash -c "
    # Create necessary directories
    mkdir -p /tmp/overlay-work /tmp/overlay-upper /home/node/.claude

    # Function to copy configs with proper merging
    merge_configs() {
        # Copy general config first if it exists (EXCLUDING projects directory, which have sensitive info)
        if [[ -d /tmp/claude-general ]]; then
            # Copy everything except the projects directory
            find /tmp/claude-general -mindepth 1 -maxdepth 1 ! -name 'projects' -exec cp -r {} /home/node/.claude/ \; 2>/dev/null || true
        fi

        # Overlay project-specific config if it exists (overwriting general)
        if [[ -d /tmp/claude-project ]]; then
            cp -r /tmp/claude-project/* /home/node/.claude/ 2>/dev/null || true
        fi
    }

    # Always use copy method to ensure projects directory is excluded
    # (fuse-overlayfs would expose the entire lower layer including projects/)
    echo '✓ Using merged configs (copy method, excluding conversations)'
    merge_configs

    # Copy credentials if provided (overwriting any from the mounted directories)
    [[ -f /tmp/credentials.json ]] && cp /tmp/credentials.json /home/node/.claude/.credentials.json

    # Copy host CLAUDE.md if provided (highest priority)
    [[ -f /tmp/host-claude-md ]] && cp /tmp/host-claude-md /home/node/.claude/CLAUDE.md

    # Create minimal config to skip setup screen
    echo '{\"hasCompletedOnboarding\": true}' > /home/node/.claude.json

    # Ensure correct ownership
    chown -R node:node /home/node/.claude 2>/dev/null || true

    # Initialize firewall if enabled
    if [[ \"$ENABLE_FIREWALL\" == \"true\" ]] && [[ -x /usr/local/bin/init-firewall.sh ]]; then
        echo '🔥 Initializing firewall...'
        sudo /usr/local/bin/init-firewall.sh
    fi

    # Start Claude or bash depending on flag
    if [[ \"$RUN_BASH\" == \"true\" ]]; then
        exec bash \"\$@\"
    else
        claude \"\$@\"
    fi
" -- "${CLAUDE_ARGS[@]+"${CLAUDE_ARGS[@]}"}"
